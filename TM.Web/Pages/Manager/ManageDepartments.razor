@page "/manager-departments"

@inject IDepartmentApi department
@inject NavigationManager Navigation

<SectionContent SectionName="pageTitle">Manage Departments</SectionContent>

<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <EditForm Model="_department" OnValidSubmit="SaveDepartmentAsync">
                <DataAnnotationsValidator />

                <div class="bg-white p-3">
                    <h5 class="m-0 fw-bold">Add/Edit Department</h5>
                    <hr />
                    <div>
                        <div class="mb-3">
                            <label class="form-label">Department Name</label>
                            <InputText @bind-Value="_department.Name" class="form-control form-control-sm" />
                            <ValidationMessage For="() => _department.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Subject Name</label>
                            <InputText @bind-Value="_department.Subject" class="form-control form-control-sm" />
                            <ValidationMessage For="() => _department.Subject" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Access Code</label>
                            <InputText @bind-Value="_department.AccessCode" class="form-control form-control-sm" />
                            <ValidationMessage For="() => _department.AccessCode" />
                        </div>

                        @if (ErrorMessage != null)
                        {
                            <div class="mb-3 border border-danger">
                                <p class="m-0 p-1">@ErrorMessage</p>
                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => ErrorMessage = null">X</button>
                            </div>
                        }
                    </div>
                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => _department = new()">Cancel</button>
                        <button type="submit" class="btn btn-sm btn-success">Save Department</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-sm-8">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Subject</th>
                        <th>Access</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (_departments.Length == 0)
                    {
                        <tr>
                            <td colspan="6">No Departments Found</td>
                        </tr>
                    }
                    else
                    {
                        int count = 1;
                        @foreach (var dep in _departments)
                        {
                            <tr>
                                <td>@count</td>
                                <td>@dep.Id</td>
                                <td>@dep.Name</td>
                                <td>@dep.Subject</td>
                                <td>@dep.AccessCode</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => NavigateToDashboard(dep.Id)">View Dashboard</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private DepartmentDto[] _departments = Array.Empty<DepartmentDto>();
    private DepartmentDto _department = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartmentsAsync();
    }

    private async Task LoadDepartmentsAsync()
    {
        _departments = await department.GetDepartmentAsync();
    }

    private async Task SaveDepartmentAsync()
    {
        try
        {
            var response = await department.SaveDepartmentAsync(_department);
            if (!response.IsSuccess)
            {
                ErrorMessage = response.ErrorMessage ?? "Error saving department.";
                return;
            }

            _department = new();
            await LoadDepartmentsAsync();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private void NavigateToDashboard(int departmentId)
    {
        Navigation.NavigateTo($"/department/dashboard?departmentId={departmentId}");
    }
}
