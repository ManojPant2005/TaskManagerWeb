@page "/auth/login"
@using System.Security.Claims
@layout EmptyLayout
@inject NavigationManager navigation
@inject QuizAuthStateProvider quiz
@using Microsoft.AspNetCore.Components.Authorization

@inject IAuthApi api
<div class="container">
    <div class="row vh-100">
        <div class="col-sm-6 mx-auto my-auto border bg-white shadow-lg">

            <div class="mt-3">
                <h1 class="h3 fw-bold text-center">Login | Task Manager</h1>
            </div>
            <hr />

            <AuthorizeView>
                <Authorizing>
                    <p>Authorizing....</p>
                </Authorizing>
                <NotAuthorized><p>Not authorized..!!</p></NotAuthorized>
                <Authorized>
                    <p>Authorized: @context.User.Claims.FirstOrDefault(n => n.Type == ClaimTypes.Name)?.Value</p>
                </Authorized>
            </AuthorizeView>

            <EditForm Model="_login" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label class="form-label">Username: </label>
                    <InputText @bind-Value="@_login.UserName" class="form-control" />
                    <ValidationMessage For="()=> _login.UserName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Password: </label>
                    <InputText type="password" @bind-Value="@_login.Password" class="form-control" />
                    <ValidationMessage For="()=> _login.Password" />
                </div>

                @if(_errror != null)
                {
                    <div class="mb-3 bg-danger text-white p-2">
                        <p>@_errror</p>
                    </div>
                }

                <div class="mb-3 d-flex justify-content-between">
                    @if (!_isBusy)
                    {
@*                         <AuthorizeView Roles="Manager">
                            <a href="auth/register" class="btn btn-outline-primary">Register</a>
                        </AuthorizeView> *@
                        <button type="submit" class="btn btn-success">Login</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-secondary">Logging in....</button>
                    }
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginDto _login = new();
    private bool _isBusy;
    private string? _errror;

    protected override void OnInitialized()
    {
        if(quiz.IsLoggedIn)
        {
            navigation.NavigateTo("/", replace: true);
        }
    }

    private async Task LoginAsync()
    {
        _errror = null;
        _isBusy = true;

        try
        {
            var authResponse = await api.LoginAsync(_login);
            if(authResponse.HasError)
            {
                _errror = authResponse.ErrorMessage;
                return;
            }
            //set the login token in some storage
            //Navigate to Protected Page
            var loggedInUser = authResponse.User;
            await quiz.SetLoginAsync(loggedInUser);
            navigation.NavigateTo("/");

        }
        catch (Exception ex)
        {

            _errror = ex.Message;
        }

        finally
        {
            _isBusy = false;
        }
    }
}
